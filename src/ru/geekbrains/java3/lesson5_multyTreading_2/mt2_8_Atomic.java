package ru.geekbrains.java3.lesson5_multyTreading_2;

import java.util.concurrent.atomic.AtomicInteger;

public class mt2_8_Atomic {
    public static void main(String[] args) {
        // В предыдущих темах мы сталкивались с таким явлением как RaceConditions, когда несколько несинхронизированных
        // потоков обращались к переменной и меняли ее значение одновременно, что приводило к ошибкам. Это было вызвано
        // тем, что операция изменения значения состоит из двух этапов - получение значения, его изменение и запись
        // обратно, т.е. из get и set, причем они разделены между собой. Если первый поток получит значение и начнет
        // менять, а в этот момент второй поток так же возмет значение переменной для ее изменения, то будет записано
        // то значение, которое вернется позднее. При атомарных типах данных операция по их изменению является неразрывной.
        // У таких данных есть методы для работы с ними. Такие методы, как правило,
        // состоят из 2 слов incrementAndGet, addAndGet, getAndGet... В таких операциях данные может изменять только
        // один поток в один момент времени

        AtomicInteger aInt = new AtomicInteger(1000);
        System.out.println(aInt.decrementAndGet());
    }
}
