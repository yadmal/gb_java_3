package ru.geekbrains.java3.lesson6_logging_testing.logging;

import java.util.logging.*;

public class MainClass2 {
    // Когда запускается приложение и никакие логеры еще нигде не созданы, в программе имеется логер с пустым именем "".
    // Как только мы создаем логер, то ему присваивается указанное имя. Родителем для этого логера будет
    // являться глобальный логер (логер с пустым именем). Как только мы создадим новый логер,
    // то он встроится в эту цепочку и будет родителем для первого созданного логера,
    // а его родителем станет логер по умолчанию(логер с пустым именем).
    // Поэтому правильно создавать логер с именем состоящим из пути до класса,
    // чтобы он мог корректно встроиться в эту цепочку

    // Это делается потому, что пакеты могут выступать в роли отдельных модулей и в случае необходимости
    // мы можем вырубить логгер конкретного модуля

    // Хэндлер, отвечающий за вывод сообщения в консоль находится в логгере по умолчантю,
    // т.е. если его выключить(выставить хэндлер родителя в OFF), то сообщения не будут выводится в консоль.

    private static final Logger logger = Logger.getLogger(MainClass2.class.getName());

    public static void main(String[] args) {

        // Хэндлер, отвечающий за вывод сообщения в консоль находится в логгере по умолчантю,
        // т.е. если его выключить(выставить хэндлер родителя в OFF), то сообщения не будут выводится в консоль.
//        Logger.getLogger("").getHandlers()[0].setLevel(Level.OFF);
//        logger.log(Level.SEVERE, "ERROR");


        // Получается, что когда мы создаем свой логер, то он не имеет собственных хэндлеров и получает их,
        // только когда мы создаем их явно. До этого момента он пользуется хэндлером родительского логера.
        // Это видно на примере, когда мы создаем собственный ConsoleHandler: в этом случае сообщение в консоль
        // будет выведено дважды, собственным консольным логером и родительским
        // Т.е. на один созданный логер приходится один консольный хэндлер, который находится в родительском безымянном логере
        Handler myConsHand = new ConsoleHandler();
        myConsHand.setFormatter(new SimpleFormatter());
        logger.addHandler(myConsHand);
        logger.log(Level.SEVERE, "ERROR");
        //Чтобы полность убрать связь с родительским логером и использовать только собственные хэндлеры,
        // используют команду:
//        logger.setUseParentHandlers(false);

    }
}
